#!/usr/bin/env node

//cpd-cli(create_plugin_dir command line)
const fs = require("fs");
const path = require("path");
const commander = require("commander");



//找到 node_modules,就能明确找到文件的所在位置
const project_basic_file = __dirname.split('node_modules')[0];

//得到Athena插件文件夹的具体路径
const plugin_dir = project_basic_file.concat("src\\core\\plugins");
// const plugin_dir = "D:\\profileProject\\cmd-plugin\\bin\\test"


async function test(plugin_name,plugin_dir,isCreateComponents) {
  //创建文件夹 client server share webview webview/components,之后分别创建3个index.ts plugin_name.vue
  const cfDir = new createDir(plugin_name, plugin_dir,isCreateComponents);
  cfDir.create();
}


class createDir {
  constructor(dirname, plugin_dir,isCreateComponents) {
    this.dirname = dirname;
    this.plugin_dir = plugin_dir;
    this.isCreateComponents = isCreateComponents;
    // this.newDirPath = ''
  }
  //根据插件名字创建总的文件夹
  async create() {
    try {
      //判断文件夹的名字是否已经存在
      if (this.isFilenameExit()) {
        console.log("文件夹已存在，请换个名字");
        return false;
      }
      //创建文件夹
      fs.mkdirSync(path.join(this.plugin_dir, this.dirname), (err) => {
        if (err) {
          console.log('创建文件夹失败', err);
        }
        console.log('文件夹创建成功,',path.join(this.plugin_dir, this.dirname))
      });
      const newDirPath = path.join(this.plugin_dir, this.dirname);
      superMkdir(newDirPath, ["client", "server", "share", "webview"]);
      // 创建webview下面的components
      if (this.isCreateComponents) {
        const webviewPath = path.join(newDirPath, "webview");
        superMkdir(webviewPath, ["components"]);
      }
    } catch (error) {
      console.log('创建失败',error);
    }
  }
  //根据插件名字判断是否存在文件
  isFilenameExit() {
    const res = fs.existsSync(path.join(this.plugin_dir, this.dirname));
    return res;
  }
}
/**
 *  cf filename
 * @param {string} path
 * @param {Array} dirname [client, server, share ,webview ]
 * @param {Array} filename 不输入默认为index.ts
 * @return {string} DirPath
 */
const superMkdir = (filePath, dirname, filename) => {
  const exampleFileType = ["client", "server", "share", "webview"];
  let examplePath = '';
  let exampleCode = "";
  const exampleDir = path.join(__dirname,'example');
  if (filePath == "" || dirname.length == 0) {
    console.log("path and dirname can not be null");
    return false;
  }

  dirname.forEach((item) => {
    //创建对应的文件夹
    fs.mkdirSync(path.join(filePath, item), (err) => {
      console.log('err',err);
    });
    //给新的文件夹添加入口文件  example: example/client.ts
    const newDirname = path.join(filePath, item);
    if (item == "webview" || item == "components") {
      examplePath = `${exampleDir}\\${item}.vue`
    } else {
      examplePath = `${exampleDir}\\${item}.ts`
    }
    //读取指定路径的文件数据
    exampleCode = fs.readFileSync(examplePath, "utf-8");
    //向指定路径的文件写入数据

    if (item == "webview" || item == "components") {
      fs.writeFileSync(
        path.join(newDirname, "index.vue"),
        exampleCode,
        "utf-8"
      );
    } else {
      fs.writeFileSync(
        path.join(newDirname, "index.ts"),
        exampleCode,
        "utf-8"
      );
    }

  });
  // }

  return filePath;
};



commander
  .version('0.0.1','-v','得到插件的当前版本')
  .description('通过命令行在Athena创建插件文件夹')
  .arguments('<pluginName>')
  .option('-c, --create-components', '创建webview下面的component文件夹,后面不需要文件名')
  .action((pluginName, options) => {
    const { createComponents } = options;
    console.log(pluginName);
    test(pluginName,plugin_dir,createComponents);
   })

   commander.parse(process.argv);

